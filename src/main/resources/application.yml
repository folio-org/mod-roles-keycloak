spring:
  application:
    name: mod-roles-keycloak
  jackson:
    default-property-inclusion: non_null
    deserialization:
      fail-on-unknown-properties: false
  datasource:
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:postgres}
    url: jdbc:postgresql://${DB_HOST:postgres}:${DB_PORT:5432}/${DB_DATABASE:postgres}
  liquibase:
    change-log: classpath:changelog/changelog-master.xml
  jpa:
    open-in-view: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  cache:
    type: caffeine
  cloud:
    openfeign:
      okhttp:
        enabled: true
  kafka:
    bootstrap-servers: ${KAFKA_HOST:kafka}:${KAFKA_PORT:9092}
    security:
      protocol: ${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
    ssl:
      key-store-password: ${KAFKA_SSL_KEYSTORE_PASSWORD:}
      key-store-location: ${KAFKA_SSL_KEYSTORE_LOCATION:}
      trust-store-password: ${KAFKA_SSL_TRUSTSTORE_PASSWORD:}
      trust-store-location: ${KAFKA_SSL_TRUSTSTORE_LOCATION:}
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer

coffee-boots:
  cache:
    spec:
      keycloak-configuration: maximumSize=500,expireAfterWrite=${KC_CONFIG_TTL:3600s}
      keycloak-access-token: maximumSize=500,expireAfterWrite=${KC_ADMIN_TOKEN_TTL:59s}
      keycloak-client-id: maximumSize=500,expireAfterWrite=${KC_CLIENT_ID_TTL:3600s}
      keycloak-users: maximumSize=100,expireAfterWrite=${KC_USER_ID_CACHE_TTL:10s}
      keycloak-user-id: maximumSize=100,expireAfterWrite=${KC_USER_ID_CACHE_TTL:10s}
      authorization-client-cache: maximumSize=100,expireAfterWrite=${KC_AUTHORIZATION_CLIENTS_CACHE_TTL:3600s}

server:
  port: 8081

folio:
  jpa:
    repository:
      base-packages: org.folio.roles.repository
  system-user:
    enabled: true

management:
  endpoints.web:
    base-path: /admin
    exposure:
      include: info,health,liquibase,threaddump,heapdump,httptrace,loggers

application:
  environment: ${ENV:folio}
  keycloak:
    base-url: ${KC_URL:keycloak:8080}
    client-id: ${KC_ADMIN_CLIENT_ID:folio-backend-admin-client}
    grant-type: ${KC_GRANT_TYPE:client_credentials}
    login:
      client-name-suffix: ${KC_LOGIN_CLIENT_SUFFIX:-login-application}
    tls:
      enabled: ${KC_CLIENT_TLS_ENABLED:false}
      trust-store-path: ${KC_CLIENT_TLS_TRUSTSTORE_PATH:}
      trust-store-password: ${KC_CLIENT_TLS_TRUSTSTORE_PASSWORD:}
      trust-store-type: ${KC_CLIENT_TLS_TRUSTSTORE_TYPE:}
    migration:
      users-batch-size: ${KC_MIGRATION_USERS_BATCH_SIZE:100}
  secret-store:
    type: ${SECRET_STORE_TYPE}
    aws-ssm:
      region: ${SECRET_STORE_AWS_SSM_REGION:}
      use-iam: ${SECRET_STORE_AWS_SSM_USE_IAM:true}
      ecs-credentials-endpoint: ${SECRET_STORE_AWS_SSM_ECS_CREDENTIALS_ENDPOINT:}
      ecs-credentials-path: ${SECRET_STORE_AWS_SSM_ECS_CREDENTIALS_PATH:}
    vault:
      token: ${SECRET_STORE_VAULT_TOKEN:}
      address: ${SECRET_STORE_VAULT_ADDRESS:}
      enable-ssl: ${SECRET_STORE_VAULT_ENABLE_SSL:false}
      pem-file-path: ${SECRET_STORE_VAULT_PEM_FILE_PATH:}
      keystore-password: ${SECRET_STORE_VAULT_KEYSTORE_PASSWORD:}
      keystore-file-path: ${SECRET_STORE_VAULT_KEYSTORE_FILE_PATH:}
      truststore-file-path: ${SECRET_STORE_VAULT_TRUSTSTORE_FILE_PATH:}
  kafka:
    listener:
      capability:
        topic-pattern: ${KAFKA_CAPABILITIES_TOPIC_PATTERN:(${application.environment}\.)(.*\.)mgr-tenant-entitlements.capability}
        group-id: ${application.environment}-mod-roles-keycloak-capability-group
  retry:
    capability-event:
      retry-attempts: ${CAPABILITY_TOPIC_RETRY_ATTEMPTS:9223372036854775807}
      retry-delay: ${CAPABILITY_TOPIC_RETRY_DELAY:1s}
  folio-permissions:
    mapping:
      source-path: ${FOLIO_PERMISSIONS_MAPPING_SOURCE_PATH:https://raw.githubusercontent.com/folio-org/folio-permissions-mappings/refs/heads/master/mappings-overrides.json}
cache:
  permission-mappings:
    ttl: ${CACHE_PERMISSION_MAPPINGS_TTL:60}
